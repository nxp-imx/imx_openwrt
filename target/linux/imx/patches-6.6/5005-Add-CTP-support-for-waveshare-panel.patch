From 19d631d26ac7e8b2e121b50186f41a194340b10b Mon Sep 17 00:00:00 2001
From: Joseph Guo <qijian.guo@nxp.com>
Date: Wed, 19 Jun 2024 13:10:45 +0300
Subject: [PATCH 05/19] Add CTP support for waveshare panel

Signed-off-by: Joseph Guo <qijian.guo@nxp.com>
---
 .../dts/freescale/imx93-11x11-frdm-dsi.dts    |   6 +
 arch/arm64/configs/imx_v8_defconfig           |   2 +-
 drivers/input/touchscreen/goodix.c            | 123 ++++++++++++------
 drivers/input/touchscreen/goodix.h            |   4 +
 4 files changed, 93 insertions(+), 42 deletions(-)

diff --git a/arch/arm64/boot/dts/freescale/imx93-11x11-frdm-dsi.dts b/arch/arm64/boot/dts/freescale/imx93-11x11-frdm-dsi.dts
index 581bf8c02980..6ab11d8dc218 100644
--- a/arch/arm64/boot/dts/freescale/imx93-11x11-frdm-dsi.dts
+++ b/arch/arm64/boot/dts/freescale/imx93-11x11-frdm-dsi.dts
@@ -52,4 +52,10 @@ waveshare_to_dsi: endpoint{
 			};
 		};
 	};
+	touchscreen@14{
+		reg = <0x14>;
+		compatible = "goodix,gt911";
+		touchscreen-size-x = <1024>;
+		touchscreen-size-y = <600>;
+	};
 };
diff --git a/arch/arm64/configs/imx_v8_defconfig b/arch/arm64/configs/imx_v8_defconfig
index 9c0ab8bf0848..bd1c81b9d8f4 100644
--- a/arch/arm64/configs/imx_v8_defconfig
+++ b/arch/arm64/configs/imx_v8_defconfig
@@ -393,7 +393,7 @@ CONFIG_KEYBOARD_CROS_EC=y
 CONFIG_INPUT_TOUCHSCREEN=y
 CONFIG_TOUCHSCREEN_ATMEL_MXT=m
 CONFIG_TOUCHSCREEN_EXC3000=y
-CONFIG_TOUCHSCREEN_GOODIX=m
+CONFIG_TOUCHSCREEN_GOODIX=y
 CONFIG_TOUCHSCREEN_ILITEK=y
 CONFIG_TOUCHSCREEN_EDT_FT5X06=m
 CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_I2C=m
diff --git a/drivers/input/touchscreen/goodix.c b/drivers/input/touchscreen/goodix.c
index 8033fa86ff5f..9022f5eb4025 100644
--- a/drivers/input/touchscreen/goodix.c
+++ b/drivers/input/touchscreen/goodix.c
@@ -48,6 +48,8 @@
 #define MAX_CONTACTS_LOC	5
 #define TRIGGER_LOC		6
 
+#define POLL_INTERVAL_MS		17	/* 17ms = 60fps */
+
 /* Our special handling for GPIO accesses through ACPI is x86 specific */
 #if defined CONFIG_X86 && defined CONFIG_ACPI
 #define ACPI_GPIO_SUPPORT
@@ -402,10 +404,14 @@ static void goodix_ts_report_pen_up(struct goodix_ts_data *ts)
 static void goodix_ts_report_touch_8b(struct goodix_ts_data *ts, u8 *coor_data)
 {
 	int id = coor_data[0] & 0x0F;
+	int x_max, y_max;
 	int input_x = get_unaligned_le16(&coor_data[1]);
 	int input_y = get_unaligned_le16(&coor_data[3]);
 	int input_w = get_unaligned_le16(&coor_data[5]);
-
+	x_max = get_unaligned_le16(&ts->config[RESOLUTION_LOC]);
+	y_max = get_unaligned_le16(&ts->config[RESOLUTION_LOC + 2]);
+	input_x = input_x * ts->prop.max_x / x_max;
+	input_y = input_y * ts->prop.max_y / y_max;
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
@@ -420,7 +426,6 @@ static void goodix_ts_report_touch_9b(struct goodix_ts_data *ts, u8 *coor_data)
 	int input_x = get_unaligned_le16(&coor_data[3]);
 	int input_y = get_unaligned_le16(&coor_data[5]);
 	int input_w = get_unaligned_le16(&coor_data[7]);
-
 	input_mt_slot(ts->input_dev, id);
 	input_mt_report_slot_state(ts->input_dev, MT_TOOL_FINGER, true);
 	touchscreen_report_pos(ts->input_dev, &ts->prop,
@@ -442,7 +447,6 @@ static void goodix_ts_report_key(struct goodix_ts_data *ts, u8 *data)
 	int touch_num;
 	u8 key_value;
 	int i;
-
 	if (data[0] & GOODIX_HAVE_KEY) {
 		touch_num = data[0] & 0x0f;
 		key_value = data[1 + ts->contact_size * touch_num];
@@ -485,12 +489,13 @@ static void goodix_process_events(struct goodix_ts_data *ts)
 	goodix_ts_report_key(ts, point_data);
 
 	for (i = 0; i < touch_num; i++)
-		if (ts->contact_size == 9)
+		if (ts->contact_size == 9) {
 			goodix_ts_report_touch_9b(ts,
-				&point_data[1 + ts->contact_size * i]);
-		else
+			&point_data[1 + ts->contact_size * i]);
+		} else {
 			goodix_ts_report_touch_8b(ts,
-				&point_data[1 + ts->contact_size * i]);
+			&point_data[1 + ts->contact_size * i]);
+		}
 
 sync:
 	input_mt_sync_frame(ts->input_dev);
@@ -508,31 +513,72 @@ static irqreturn_t goodix_ts_irq_handler(int irq, void *dev_id)
 	struct goodix_ts_data *ts = dev_id;
 
 	goodix_process_events(ts);
+	goodix_i2c_write_u8(ts->client, GOODIX_READ_COOR_ADDR, 0);
 
-	/*
-	 * according to debug, for 911 chip, when touch over 3 fingers
-	 * in the meantime, this 911 chip need wait a bit time to let
-	 * internal logic retrun back to normal to handle the i2c operation
-	 * otherwise the following i2c command may meet timeout fail.
-	 */
-	if (!strcmp(ts->id, "911"))
-		usleep_range(50, 100);
+	return IRQ_HANDLED;
+}
+
+static void goodix_ts_irq_poll_timer(struct timer_list *t)
+{
+	struct goodix_ts_data *ts = from_timer(ts, t, timer);
+
+	schedule_work(&ts->work_i2c_poll);
+	mod_timer(&ts->timer, jiffies + msecs_to_jiffies(POLL_INTERVAL_MS));
+}
+
+static void goodix_ts_work_i2c_poll(struct work_struct *work)
+{
+	struct goodix_ts_data *ts = container_of(work,
+			struct goodix_ts_data, work_i2c_poll);
 
+	goodix_process_events(ts);
 	goodix_i2c_write_u8(ts->client, GOODIX_READ_COOR_ADDR, 0);
+}
 
-	return IRQ_HANDLED;
+static void goodix_enable_irq(struct goodix_ts_data *ts)
+{
+	if (ts->client->irq) {
+		enable_irq(ts->client->irq);
+	} else {
+		ts->timer.expires = jiffies + msecs_to_jiffies(POLL_INTERVAL_MS);
+		add_timer(&ts->timer);
+	}
+}
+
+static void goodix_disable_irq(struct goodix_ts_data *ts)
+{
+	if (ts->client->irq) {
+		disable_irq(ts->client->irq);
+	} else {
+		del_timer(&ts->timer);
+		cancel_work_sync(&ts->work_i2c_poll);
+	}
 }
 
 static void goodix_free_irq(struct goodix_ts_data *ts)
 {
-	devm_free_irq(&ts->client->dev, ts->client->irq, ts);
+	if (ts->client->irq) {
+		devm_free_irq(&ts->client->dev, ts->client->irq, ts);
+	} else {
+		del_timer(&ts->timer);
+		cancel_work_sync(&ts->work_i2c_poll);
+	}
 }
 
 static int goodix_request_irq(struct goodix_ts_data *ts)
 {
-	return devm_request_threaded_irq(&ts->client->dev, ts->client->irq,
-					 NULL, goodix_ts_irq_handler,
-					 ts->irq_flags, ts->client->name, ts);
+	if (ts->client->irq) {
+		return devm_request_threaded_irq(&ts->client->dev, ts->client->irq,
+						 NULL, goodix_ts_irq_handler,
+						 ts->irq_flags, ts->client->name, ts);
+	} else {
+		INIT_WORK(&ts->work_i2c_poll,
+			  goodix_ts_work_i2c_poll);
+		timer_setup(&ts->timer, goodix_ts_irq_poll_timer, 0);
+		if (ts->irq_pin_access_method == IRQ_PIN_ACCESS_NONE)
+			goodix_enable_irq(ts);
+		return 0;
+	}
 }
 
 static int goodix_check_cfg_8(struct goodix_ts_data *ts, const u8 *cfg, int len)
@@ -642,10 +688,6 @@ int goodix_send_cfg(struct goodix_ts_data *ts, const u8 *cfg, int len)
 	if (error)
 		return error;
 
-	error = goodix_i2c_write(ts->client, ts->chip->config_addr, cfg, len);
-	if (error)
-		return error;
-
 	dev_dbg(&ts->client->dev, "Config sent successfully.");
 
 	/* Let the firmware reconfigure itself, so sleep for 10ms */
@@ -1030,7 +1072,7 @@ static int goodix_get_gpio_config(struct goodix_ts_data *ts)
 	default:
 		if (ts->gpiod_int && ts->gpiod_rst) {
 			ts->reset_controller_at_probe = true;
-			ts->load_cfg_from_disk = false;
+			ts->load_cfg_from_disk = true;
 			ts->irq_pin_access_method = IRQ_PIN_ACCESS_GPIO;
 		}
 	}
@@ -1057,7 +1099,7 @@ static void goodix_read_config(struct goodix_ts_data *ts)
 	 */
 	if (!ts->firmware_name) {
 		error = goodix_i2c_read(ts->client, ts->chip->config_addr,
-					ts->config, 9);
+					ts->config, ts->chip->config_len);
 		if (error) {
 			ts->int_trigger_type = GOODIX_INT_TRIGGER;
 			ts->max_touch_num = GOODIX_MAX_CONTACTS;
@@ -1151,7 +1193,10 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 		return -ENOMEM;
 	}
 
-	ts->input_dev->name = "Goodix Capacitive TouchScreen";
+	snprintf(ts->name, GOODIX_NAME_MAX_LEN, "%s Goodix Capacitive TouchScreen",
+		 dev_name(&ts->client->dev));
+
+	ts->input_dev->name = ts->name;
 	ts->input_dev->phys = "input/ts";
 	ts->input_dev->id.bustype = BUS_I2C;
 	ts->input_dev->id.vendor = 0x0416;
@@ -1184,7 +1229,6 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 
 	/* Try overriding touchscreen parameters via device properties */
 	touchscreen_parse_properties(ts->input_dev, true, &ts->prop);
-
 	if (!ts->prop.max_x || !ts->prop.max_y || !ts->max_touch_num) {
 		if (!ts->reset_controller_at_probe &&
 		    ts->irq_pin_access_method != IRQ_PIN_ACCESS_NONE) {
@@ -1228,7 +1272,6 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 			"Failed to initialize MT slots: %d", error);
 		return error;
 	}
-
 	error = input_register_device(ts->input_dev);
 	if (error) {
 		dev_err(&ts->client->dev,
@@ -1247,9 +1290,6 @@ static int goodix_configure_dev(struct goodix_ts_data *ts)
 	if (error)
 		return error;
 
-	if (device_property_read_bool(ts->input_dev->dev.parent, "edge-failling-trigger"))
-		ts->int_trigger_type = GOODIX_INT_TRIGGER;
-
 	ts->irq_flags = goodix_irq_flags[ts->int_trigger_type] | IRQF_ONESHOT;
 	error = goodix_request_irq(ts);
 	if (error) {
@@ -1310,7 +1350,6 @@ static int goodix_ts_probe(struct i2c_client *client)
 	struct goodix_ts_data *ts;
 	const char *cfg_name;
 	int error;
-
 	dev_dbg(&client->dev, "I2C Address: 0x%02x\n", client->addr);
 
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
@@ -1353,7 +1392,6 @@ static int goodix_ts_probe(struct i2c_client *client)
 					 goodix_disable_regulators, ts);
 	if (error)
 		return error;
-
 reset:
 	if (ts->reset_controller_at_probe) {
 		/* reset the controller */
@@ -1420,6 +1458,11 @@ static void goodix_ts_remove(struct i2c_client *client)
 {
 	struct goodix_ts_data *ts = i2c_get_clientdata(client);
 
+	if (!client->irq) {
+		del_timer(&ts->timer);
+		cancel_work_sync(&ts->work_i2c_poll);
+	}
+
 	if (ts->load_cfg_from_disk)
 		wait_for_completion(&ts->firmware_loading_complete);
 }
@@ -1435,7 +1478,7 @@ static int goodix_suspend(struct device *dev)
 
 	/* We need gpio pins to suspend/resume */
 	if (ts->irq_pin_access_method == IRQ_PIN_ACCESS_NONE) {
-		disable_irq(client->irq);
+		goodix_disable_irq(ts);
 		return 0;
 	}
 
@@ -1479,7 +1522,7 @@ static int goodix_resume(struct device *dev)
 	int error;
 
 	if (ts->irq_pin_access_method == IRQ_PIN_ACCESS_NONE) {
-		enable_irq(client->irq);
+		goodix_enable_irq(ts);
 		return 0;
 	}
 
@@ -1508,11 +1551,9 @@ static int goodix_resume(struct device *dev)
 		if (error)
 			return error;
 
-		if (ts->load_cfg_from_disk) {
-			error = goodix_send_cfg(ts, ts->config, ts->chip->config_len);
-			if (error)
-				return error;
-		}
+		error = goodix_send_cfg(ts, ts->config, ts->chip->config_len);
+		if (error)
+			return error;
 	}
 
 	error = goodix_request_irq(ts);
diff --git a/drivers/input/touchscreen/goodix.h b/drivers/input/touchscreen/goodix.h
index 87797cc88b32..132e49d66324 100644
--- a/drivers/input/touchscreen/goodix.h
+++ b/drivers/input/touchscreen/goodix.h
@@ -56,6 +56,7 @@
 #define GOODIX_ID_MAX_LEN			4
 #define GOODIX_CONFIG_MAX_LENGTH		240
 #define GOODIX_MAX_KEYS				7
+#define GOODIX_NAME_MAX_LEN			38
 
 enum goodix_irq_pin_access_method {
 	IRQ_PIN_ACCESS_NONE,
@@ -91,6 +92,7 @@ struct goodix_ts_data {
 	enum gpiod_flags gpiod_rst_flags;
 	char id[GOODIX_ID_MAX_LEN + 1];
 	char cfg_name[64];
+	char name[GOODIX_NAME_MAX_LEN];
 	u16 version;
 	bool reset_controller_at_probe;
 	bool load_cfg_from_disk;
@@ -104,6 +106,8 @@ struct goodix_ts_data {
 	u8 main_clk[GOODIX_MAIN_CLK_LEN];
 	int bak_ref_len;
 	u8 *bak_ref;
+	struct timer_list timer;
+	struct work_struct work_i2c_poll;
 };
 
 int goodix_i2c_read(struct i2c_client *client, u16 reg, u8 *buf, int len);
-- 
2.25.1

